name: üìã Template System Compliance

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  template-check:
    name: Template Structure Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate template system
      run: |
        #!/bin/bash
        set -e

        echo "üìã Validating Carian Observatory template system..."

        # Initialize violation tracking
        VIOLATIONS=""
        VIOLATION_COUNT=0

        # Check 1: Verify .gitignore excludes generated files
        echo "üîç Checking .gitignore compliance..."

        REQUIRED_IGNORES=(
          "scripts/"
          "services/*/configs/"
          ".env"
          "CLAUDE.md"
        )

        if [ ! -f ".gitignore" ]; then
          echo "‚ùå .gitignore file missing!"
          VIOLATIONS="$VIOLATIONS\n- Missing .gitignore file"
          VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
        else
          for ignore_pattern in "${REQUIRED_IGNORES[@]}"; do
            if ! grep -q "^$ignore_pattern" .gitignore; then
              echo "‚ùå .gitignore missing pattern: $ignore_pattern"
              VIOLATIONS="$VIOLATIONS\n- .gitignore missing: $ignore_pattern"
              VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
            else
              echo "‚úÖ .gitignore includes: $ignore_pattern"
            fi
          done
        fi

        # Check 2: Template file structure
        echo "üèóÔ∏è Checking template structure..."

        if [ -d "templates/" ]; then
          echo "‚úÖ templates/ directory exists"

          # Check for .template files
          TEMPLATE_FILES=$(find templates/ -name "*.template" 2>/dev/null || true)

          if [ -z "$TEMPLATE_FILES" ]; then
            echo "‚ö†Ô∏è No .template files found in templates/"
            VIOLATIONS="$VIOLATIONS\n- No .template files found"
            VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
          else
            TEMPLATE_COUNT=$(echo "$TEMPLATE_FILES" | wc -l)
            echo "‚úÖ Found $TEMPLATE_COUNT template files"

            # Validate each template file
            echo "$TEMPLATE_FILES" | while read -r template_file; do
              # Check for yourdomain.com usage
              if grep -q "yourdomain.com" "$template_file"; then
                echo "‚úÖ $template_file uses yourdomain.com placeholder"
              else
                # Check if it should contain domain references
                if grep -qE "\.(com|net|org)" "$template_file"; then
                  echo "‚ö†Ô∏è $template_file contains domains but not yourdomain.com"
                fi
              fi
            done
          fi
        else
          echo "‚ùå templates/ directory missing!"
          VIOLATIONS="$VIOLATIONS\n- templates/ directory missing"
          VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
        fi

        # Check 3: Verify scripts/ directory is gitignored
        echo "üö´ Checking scripts/ directory is not tracked..."

        if [ -d "scripts/" ]; then
          # Check if any files in scripts/ are tracked by git
          TRACKED_SCRIPTS=$(git ls-files scripts/ 2>/dev/null || true)

          if [ ! -z "$TRACKED_SCRIPTS" ]; then
            echo "‚ùå Found tracked files in scripts/ directory:"
            echo "$TRACKED_SCRIPTS"
            VIOLATIONS="$VIOLATIONS\n- Tracked files in scripts/: $TRACKED_SCRIPTS"
            VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
          else
            echo "‚úÖ scripts/ directory properly gitignored"
          fi
        fi

        # Check 4: Container naming convention
        echo "üê≥ Checking container naming convention..."

        DOCKER_FILES=$(find . -name "docker-compose*.yml" 2>/dev/null || true)

        if [ ! -z "$DOCKER_FILES" ]; then
          echo "$DOCKER_FILES" | while read -r compose_file; do
            # Check for co- prefix in container names
            CONTAINER_NAMES=$(grep -E "container_name:" "$compose_file" 2>/dev/null || true)

            if [ ! -z "$CONTAINER_NAMES" ]; then
              NON_COMPLIANT=$(echo "$CONTAINER_NAMES" | grep -v "co-" || true)

              if [ ! -z "$NON_COMPLIANT" ]; then
                echo "‚ö†Ô∏è Non-compliant container names in $compose_file:"
                echo "$NON_COMPLIANT"
              fi
            fi
          done
        fi

        # Check 5: Service structure validation
        echo "üè¢ Checking service structure..."

        if [ -d "services/" ]; then
          SERVICES=$(find services/ -mindepth 1 -maxdepth 1 -type d 2>/dev/null || true)

          if [ ! -z "$SERVICES" ]; then
            echo "$SERVICES" | while read -r service_dir; do
              SERVICE_NAME=$(basename "$service_dir")

              # Check for docker-compose.yml in service
              if [ -f "$service_dir/docker-compose.yml" ]; then
                echo "‚úÖ $SERVICE_NAME has docker-compose.yml"
              else
                echo "‚ö†Ô∏è $SERVICE_NAME missing docker-compose.yml"
              fi

              # Check for configs directory
              if [ -d "$service_dir/configs/" ]; then
                # Check if configs are tracked (they shouldn't be)
                TRACKED_CONFIGS=$(git ls-files "$service_dir/configs/" 2>/dev/null || true)

                if [ ! -z "$TRACKED_CONFIGS" ]; then
                  echo "‚ùå Tracked config files in $service_dir/configs/:"
                  echo "$TRACKED_CONFIGS"
                  VIOLATIONS="$VIOLATIONS\n- Tracked configs: $TRACKED_CONFIGS"
                  VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
                fi
              fi
            done
          fi
        fi

        # Check 6: Master script validation
        echo "üéØ Checking master generation script..."

        if [ -f "create-all-from-templates.sh" ]; then
          echo "‚úÖ Master script exists"

          if [ -x "create-all-from-templates.sh" ]; then
            echo "‚úÖ Master script is executable"
          else
            echo "‚ö†Ô∏è Master script not executable"
          fi
        else
          echo "‚ùå create-all-from-templates.sh missing!"
          VIOLATIONS="$VIOLATIONS\n- Master script missing"
          VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
        fi

        # Generate compliance report
        echo ""
        echo "üìä TEMPLATE COMPLIANCE REPORT"
        echo "============================"
        echo "Scan Date: $(date)"
        echo "Total Violations: $VIOLATION_COUNT"

        if [ $VIOLATION_COUNT -gt 0 ]; then
          echo ""
          echo "‚ùå COMPLIANCE VIOLATIONS:"
          echo -e "$VIOLATIONS"
          echo ""
          echo "üîß FIXES NEEDED:"
          echo "1. Update .gitignore to exclude generated files"
          echo "2. Ensure template files use yourdomain.com"
          echo "3. Remove any tracked files from scripts/ and services/*/configs/"
          echo "4. Verify container names use co- prefix"
          echo ""
          exit 1
        else
          echo "‚úÖ All template compliance checks passed!"
        fi