#!/bin/bash
# Script to regenerate nginx configuration with updated domain variables
# Usage: ./scripts/update-nginx-domains.sh

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üîÑ Updating nginx configuration with current domain variables...${NC}"

# Check if .env file exists
if [[ ! -f ".env" ]]; then
    echo -e "${RED}‚ùå .env file not found. Please ensure you're running from the project root.${NC}"
    exit 1
fi

# Extract domain-related variables from .env (avoiding 1Password template syntax issues)
eval $(grep -E "^(PRIMARY_DOMAIN|MACHINE_ID|.*_SUBDOMAIN|GENERIC_.*_DOMAIN)=" .env)

# Check if required variables are set
REQUIRED_VARS=(
    "PRIMARY_DOMAIN"
    "MACHINE_ID"
    "WEBUI_SUBDOMAIN"
    "PERPLEXICA_SUBDOMAIN"
    "AUTH_SUBDOMAIN"
    "CANARY_SUBDOMAIN"
)

echo -e "${YELLOW}üìã Checking required environment variables...${NC}"
for var in "${REQUIRED_VARS[@]}"; do
    if [[ -z "${!var}" ]]; then
        echo -e "${RED}‚ùå Required variable $var is not set in .env file${NC}"
        exit 1
    fi
    echo -e "‚úì $var=${!var}"
done

# Construct domain variables (these should match the .env file)
export WEBUI_DOMAIN="${WEBUI_SUBDOMAIN}-${MACHINE_ID}.${PRIMARY_DOMAIN}"
export PERPLEXICA_DOMAIN="${PERPLEXICA_SUBDOMAIN}-${MACHINE_ID}.${PRIMARY_DOMAIN}"
export AUTH_DOMAIN="${AUTH_SUBDOMAIN}-${MACHINE_ID}.${PRIMARY_DOMAIN}"
export CANARY_DOMAIN="${CANARY_SUBDOMAIN}.${PRIMARY_DOMAIN}"

echo -e "${YELLOW}üåê Generated domain mappings:${NC}"
echo -e "  WebUI Production: $WEBUI_DOMAIN"
echo -e "  WebUI Canary: $CANARY_DOMAIN"
echo -e "  Perplexica: $PERPLEXICA_DOMAIN"
echo -e "  Authelia: $AUTH_DOMAIN"

# Note: Configuration will be generated by Docker container automatically
echo -e "${YELLOW}üìù Configuration will be generated by nginx container from template...${NC}"

# Check if Docker containers are running
if docker ps --filter "name=co-nginx-service" --format "{{.Names}}" | grep -q "co-nginx-service"; then
    echo -e "${YELLOW}üîÑ Restarting nginx container to apply new configuration...${NC}"
    docker restart co-nginx-service
    
    # Wait a moment and check if nginx is healthy
    sleep 3
    if docker ps --filter "name=co-nginx-service" --filter "status=running" --format "{{.Names}}" | grep -q "co-nginx-service"; then
        echo -e "${GREEN}‚úÖ Nginx successfully restarted with updated configuration${NC}"
    else
        echo -e "${RED}‚ùå Nginx container failed to start. Check logs: docker logs co-nginx-service${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Nginx container is not running. Configuration updated but not applied.${NC}"
    echo -e "${YELLOW}   Start services with: docker compose up -d${NC}"
fi

echo -e "${GREEN}üéâ Domain configuration update complete!${NC}"