#!/bin/bash

# SSL Certificate Generation Script for Ollama-WebUI-Nginx-Perplexica
# This script generates self-signed certificates for local HTTPS access

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SSL_DIR="./ssl_cert"
DAYS=365
COUNTRY="US"
STATE="CA"
CITY="San Francisco"
ORG="Local Development"
OU="IT Department"

# Domain list
DOMAINS=(
    "webui.yourdomain.com"
    "webui-m4.yourdomain.com"
    "webui-m2.yourdomain.com"
    "perplexica.yourdomain.com"
    "perplexica-m4.yourdomain.com"
    "perplexica-m2.yourdomain.com"
    "webui-m4-canary.yourdomain.com"
    "auth-m4.yourdomain.com"
    "auth-status-m4.yourdomain.com"
)

echo -e "${BLUE}üîê SSL Certificate Generation for Local Development Setup${NC}"
echo -e "${BLUE}============================================================${NC}"

# Create SSL directory
echo -e "${YELLOW}üìÅ Creating SSL certificate directory...${NC}"
mkdir -p "$SSL_DIR"

# Function to generate certificate for a domain
generate_cert() {
    local domain=$1
    local cert_file="$SSL_DIR/${domain}.crt"
    local key_file="$SSL_DIR/${domain}.key"
    local csr_file="$SSL_DIR/${domain}.csr"
    
    echo -e "${YELLOW}üîë Generating certificate for ${domain}...${NC}"
    
    # Generate private key
    openssl genrsa -out "$key_file" 2048 2>/dev/null
    
    # Generate certificate signing request
    openssl req -new -key "$key_file" -out "$csr_file" -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORG/OU=$OU/CN=$domain" 2>/dev/null
    
    # Generate self-signed certificate with SAN extension
    openssl x509 -req -in "$csr_file" -signkey "$key_file" -out "$cert_file" -days $DAYS \
        -extensions v3_req -extfile <(
        echo '[v3_req]'
        echo 'basicConstraints = CA:FALSE'
        echo 'keyUsage = nonRepudiation, digitalSignature, keyEncipherment'
        echo 'subjectAltName = @alt_names'
        echo '[alt_names]'
        echo "DNS.1 = $domain"
        echo "DNS.2 = localhost"
        echo "IP.1 = 127.0.0.1"
        echo "IP.2 = ::1"
    ) 2>/dev/null
    
    # Clean up CSR file
    rm "$csr_file"
    
    # Set proper permissions
    chmod 600 "$key_file"
    chmod 644 "$cert_file"
    
    echo -e "${GREEN}‚úÖ Certificate generated for ${domain}${NC}"
}

# Generate certificates for all domains
for domain in "${DOMAINS[@]}"; do
    generate_cert "$domain"
done

# Generate a combined certificate for wildcard support (optional)
echo -e "${YELLOW}üåü Generating wildcard certificate for *.yourdomain.com...${NC}"
WILDCARD_CERT="$SSL_DIR/wildcard.yourdomain.com.crt"
WILDCARD_KEY="$SSL_DIR/wildcard.yourdomain.com.key"
WILDCARD_CSR="$SSL_DIR/wildcard.yourdomain.com.csr"

openssl genrsa -out "$WILDCARD_KEY" 2048 2>/dev/null
openssl req -new -key "$WILDCARD_KEY" -out "$WILDCARD_CSR" -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORG/OU=$OU/CN=*.yourdomain.com" 2>/dev/null
openssl x509 -req -in "$WILDCARD_CSR" -signkey "$WILDCARD_KEY" -out "$WILDCARD_CERT" -days $DAYS \
    -extensions v3_req -extfile <(
    echo '[v3_req]'
    echo 'basicConstraints = CA:FALSE'
    echo 'keyUsage = nonRepudiation, digitalSignature, keyEncipherment'
    echo 'subjectAltName = @alt_names'
    echo '[alt_names]'
    echo 'DNS.1 = *.yourdomain.com'
    echo 'DNS.2 = yourdomain.com'
    echo 'DNS.3 = localhost'
    echo 'IP.1 = 127.0.0.1'
    echo 'IP.2 = ::1'
) 2>/dev/null

rm "$WILDCARD_CSR"
chmod 600 "$WILDCARD_KEY"
chmod 644 "$WILDCARD_CERT"

echo -e "${GREEN}‚úÖ Wildcard certificate generated${NC}"

# Display certificate information
echo -e "\n${BLUE}üìã Generated Certificates:${NC}"
echo -e "${BLUE}=========================${NC}"
for domain in "${DOMAINS[@]}"; do
    echo -e "${GREEN}‚Ä¢ ${domain}${NC}"
    echo -e "  Certificate: ${SSL_DIR}/${domain}.crt"
    echo -e "  Private Key: ${SSL_DIR}/${domain}.key"
done
echo -e "${GREEN}‚Ä¢ *.yourdomain.com (wildcard)${NC}"
echo -e "  Certificate: ${WILDCARD_CERT}"
echo -e "  Private Key: ${WILDCARD_KEY}"

# Instructions
echo -e "\n${YELLOW}üì± iOS Device Setup Instructions:${NC}"
echo -e "${YELLOW}=================================${NC}"
echo -e "1. Visit any of the HTTPS URLs on your iOS device"
echo -e "2. Tap 'Advanced' when you see the security warning"
echo -e "3. Tap 'Proceed to [domain]'"
echo -e "4. Go to Settings > General > About > Certificate Trust Settings"
echo -e "5. Enable full trust for the certificate"

echo -e "\n${YELLOW}üåê DNS Setup Options:${NC}"
echo -e "${YELLOW}=====================${NC}"
echo -e "${BLUE}Option A: /etc/hosts file (Mac only)${NC}"
echo -e "Add these lines to /etc/hosts on each Mac:"
echo -e "${GREEN}sudo nano /etc/hosts${NC}"
for domain in "${DOMAINS[@]}"; do
    echo -e "‚Ä¢ [Your Mac IP] ${domain}"
done
echo -e "\n${BLUE}Option B: IP-based access (iOS compatible)${NC}"
echo -e "Access services directly via IP addresses:"
echo -e "‚Ä¢ Open-WebUI: https://[your-ip]"
echo -e "‚Ä¢ Perplexica: https://[your-ip]:8443"

echo -e "\n${GREEN}üéâ SSL setup complete! You can now run:${NC}"
echo -e "${GREEN}   docker compose up -d${NC}"
echo -e "\n${BLUE}üí° For HTTP-only testing, use:${NC}"
echo -e "${BLUE}   docker compose -f docker-compose.simple.yaml up -d${NC}"
