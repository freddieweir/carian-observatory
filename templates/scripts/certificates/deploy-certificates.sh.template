#!/bin/bash

# =============================================================================
# Secure Certificate Deployment Script
# =============================================================================
# This script retrieves SSL certificates from 1Password and deploys them
# safely without committing sensitive data to git
#
# Usage: ./scripts/deploy-certificates.sh [--environment prod|canary]
# Requires: 1Password CLI (op)

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
SSL_CERT_DIR="$PROJECT_ROOT/ssl_cert"

# Environment (prod or canary)
ENVIRONMENT="${1:-prod}"

# Color output for better visibility
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check dependencies
check_dependencies() {
    if ! command -v op &> /dev/null; then
        log_error "1Password CLI (op) is not installed or not in PATH"
        log_info "Install: https://developer.1password.com/docs/cli/get-started/"
        exit 1
    fi
    
    if ! op whoami &> /dev/null; then
        log_error "Not signed in to 1Password CLI"
        log_info "Run: op signin"
        exit 1
    fi
}

# Create SSL certificate directory if it doesn't exist
ensure_ssl_dir() {
    mkdir -p "$SSL_CERT_DIR"
    chmod 700 "$SSL_CERT_DIR"
}

# Deploy certificates for a specific domain
deploy_domain_certs() {
    local domain=$1
    local cert_title="SSL Certificate - $domain"
    local key_title="SSL Private Key - $domain"
    
    log_info "Deploying certificates for: $domain"
    
    # Try to retrieve certificate
    if op document get "$cert_title" --out-file "$SSL_CERT_DIR/$domain.crt" 2>/dev/null; then
        log_info "  ✓ Certificate retrieved: $domain.crt"
        chmod 644 "$SSL_CERT_DIR/$domain.crt"
    else
        log_warn "  ⚠ Certificate not found in 1Password: $cert_title"
        return 1
    fi
    
    # Try to retrieve private key
    if op document get "$key_title" --out-file "$SSL_CERT_DIR/$domain.key" 2>/dev/null; then
        log_info "  ✓ Private key retrieved: $domain.key"
        chmod 600 "$SSL_CERT_DIR/$domain.key"
    else
        log_warn "  ⚠ Private key not found in 1Password: $key_title"
        rm -f "$SSL_CERT_DIR/$domain.crt"  # Clean up cert if key is missing
        return 1
    fi
    
    # Verify certificate and key match
    if ! openssl x509 -noout -modulus -in "$SSL_CERT_DIR/$domain.crt" | openssl md5 | awk '{print $2}' > /tmp/cert_hash 2>/dev/null; then
        log_error "  ✗ Invalid certificate format: $domain.crt"
        return 1
    fi
    
    if ! openssl rsa -noout -modulus -in "$SSL_CERT_DIR/$domain.key" | openssl md5 | awk '{print $2}' > /tmp/key_hash 2>/dev/null; then
        log_error "  ✗ Invalid private key format: $domain.key"
        return 1
    fi
    
    if ! diff /tmp/cert_hash /tmp/key_hash >/dev/null 2>&1; then
        log_error "  ✗ Certificate and private key do not match for: $domain"
        return 1
    fi
    
    log_info "  ✓ Certificate verification passed: $domain"
    rm -f /tmp/cert_hash /tmp/key_hash
    return 0
}

# Main deployment function
main() {
    log_info "Starting secure certificate deployment for environment: $ENVIRONMENT"
    
    check_dependencies
    ensure_ssl_dir
    
    # Define domains based on environment
    case "$ENVIRONMENT" in
        "prod")
            DOMAINS=(
                "webui.yourdomain.com"
                "perplexica.yourdomain.com"
                "auth.yourdomain.com"
            )
            ;;
        "canary")
            DOMAINS=(
                "webui-test.yourdomain.com"
                "auth-test.yourdomain.com"
                "searxng-test.yourdomain.com"
            )
            ;;
        *)
            log_error "Invalid environment: $ENVIRONMENT"
            log_info "Usage: $0 [prod|canary]"
            exit 1
            ;;
    esac
    
    # Deploy certificates for each domain
    local success_count=0
    local total_count=${#DOMAINS[@]}
    
    for domain in "${DOMAINS[@]}"; do
        if deploy_domain_certs "$domain"; then
            ((success_count++))
        fi
    done
    
    # Summary
    log_info "Certificate deployment complete:"
    log_info "  ✓ Successful: $success_count/$total_count domains"
    
    if [ $success_count -eq $total_count ]; then
        log_info "All certificates deployed successfully!"
        exit 0
    else
        log_warn "Some certificates failed to deploy. Check 1Password vault contents."
        exit 1
    fi
}

# Security check - ensure we're not in a git repository root accidentally committing
if [ -f "$PROJECT_ROOT/.git/config" ] && [ "$(pwd)" = "$PROJECT_ROOT" ]; then
    log_warn "Running in git repository root. Certificates will be excluded by .gitignore"
fi

# Run main function
main "$@"