#!/bin/bash

# start-with-secrets.sh
# Secure startup script for Athena Core that deploys API keys from 1Password
# before starting Docker Compose services

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_usage() {
    cat << EOF
Usage: $0 [DOCKER_COMPOSE_ARGS...]

Securely start Athena Core services with API keys from 1Password.

This script performs the following steps:
1. Deploys API keys from 1Password to .env file
2. Starts Docker Compose services with provided arguments
3. Performs health checks to ensure services are running

EXAMPLES:
    $0                          # Start all services
    $0 up -d                    # Start services in detached mode
    $0 up -d --build            # Start with rebuild
    $0 restart nginx            # Restart specific service
    $0 logs -f open-webui       # Follow logs for specific service

ENVIRONMENT VARIABLES:
    SKIP_API_KEY_DEPLOYMENT     Skip 1Password deployment (use existing .env)
    DOCKER_COMPOSE_FILE         Override docker-compose file location

REQUIREMENTS:
    - 1Password CLI (op) installed and authenticated
    - 1Password item 'AI Infrastructure Config' with API keys
    - .env.template file with 1Password template variables

EOF
}

deploy_api_keys() {
    if [[ "${SKIP_API_KEY_DEPLOYMENT:-}" == "true" ]]; then
        log_warning "Skipping API key deployment (SKIP_API_KEY_DEPLOYMENT=true)"
        return 0
    fi
    
    log_info "🔐 Deploying API keys from 1Password..."
    
    if [[ -f "$SCRIPT_DIR/deploy-api-keys.sh" ]]; then
        if "$SCRIPT_DIR/deploy-api-keys.sh"; then
            log_success "API keys deployed successfully"
        else
            log_error "Failed to deploy API keys from 1Password"
            exit 1
        fi
    else
        log_error "API key deployment script not found: $SCRIPT_DIR/deploy-api-keys.sh"
        exit 1
    fi
}

start_services() {
    local compose_args=("$@")
    
    log_info "🚀 Starting Athena Core services..."
    
    # Change to project directory
    cd "$PROJECT_ROOT"
    
    # Default to 'up -d' if no arguments provided
    if [[ ${#compose_args[@]} -eq 0 ]]; then
        compose_args=("up" "-d")
    fi
    
    # Start services with provided arguments
    if docker compose "${compose_args[@]}"; then
        log_success "Docker Compose command completed successfully"
    else
        log_error "Docker Compose command failed"
        exit 1
    fi
}

perform_health_checks() {
    log_info "🏥 Performing health checks..."
    
    # Give services time to initialize
    sleep 5
    
    local failed_services=0
    
    # Check if health check script exists and run it
    if [[ -f "$SCRIPT_DIR/health-check.sh" ]]; then
        log_info "Running comprehensive health checks..."
        if "$SCRIPT_DIR/health-check.sh" --quiet; then
            log_success "All health checks passed"
        else
            log_warning "Some health checks failed - check service logs"
            failed_services=1
        fi
    else
        # Basic Docker service status check
        log_info "Running basic service status check..."
        if docker compose ps --services --filter "status=running" | wc -l | grep -q '^[1-9]'; then
            log_success "Services are running"
        else
            log_warning "No services appear to be running"
            failed_services=1
        fi
    fi
    
    if [[ $failed_services -eq 1 ]]; then
        log_info "To debug issues, try:"
        log_info "  docker compose logs"
        log_info "  docker compose ps"
        log_info "  ./scripts/health-check.sh"
    fi
}

show_status() {
    log_info "📊 Service Status Summary:"
    
    # Show running containers
    echo ""
    docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
    
    echo ""
    log_info "🌐 Available endpoints (if configured in nginx):"
    log_info "  Production WebUI: https://webui.yourdomain.com/"
    log_info "  Canary WebUI: https://webui-canary.yourdomain.com/"
    log_info "  Authentication: https://auth.yourdomain.com/"
    log_info "  Perplexica: https://perplexica.yourdomain.com/"
    
    echo ""
    log_info "🔧 Management commands:"
    log_info "  View logs: docker compose logs -f [service_name]"
    log_info "  Restart: ./scripts/smart-restart.sh"
    log_info "  Health check: ./scripts/health-check.sh"
}

main() {
    # Parse help flag
    for arg in "$@"; do
        if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
            show_usage
            exit 0
        fi
    done
    
    log_info "🔥 Starting Athena Core AI Infrastructure Platform"
    echo ""
    
    # Step 1: Deploy API keys from 1Password
    deploy_api_keys
    echo ""
    
    # Step 2: Start Docker Compose services
    start_services "$@"
    echo ""
    
    # Step 3: Perform health checks (only for startup commands)
    if [[ $# -eq 0 ]] || [[ "$1" == "up" ]]; then
        perform_health_checks
        echo ""
        show_status
    fi
    
    echo ""
    log_success "🎉 Athena Core startup completed!"
    log_info "Your AI infrastructure is ready with secure API key integration"
}

# Only run main if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi