#!/bin/bash
# SSL Certificate Migration to 1Password
# Moves all SSL certificates from local filesystem to 1Password Nazarick API vault

set -eo pipefail

VAULT="Nazarick API"
DRY_RUN=${1:-false}

echo "üîê SSL Certificate Migration to 1Password"
echo "========================================="

# Define certificate mapping (old domain -> new generic name)
declare -A cert_mapping=(
    ["auth-canaryseas.com"]="auth-test.yourdomain.com"
    ["perplexica-canaryseas.com"]="perplexica-test.yourdomain.com" 
    ["searxng-canaryseas.com"]="searxng-test.yourdomain.com"
    ["webui-canaryseas.com"]="webui-test.yourdomain.com"
    ["auth-m4.yourdomain.com"]="auth-m4.yourdomain.com"
    ["auth-status-m4.yourdomain.com"]="auth-status-m4.yourdomain.com"
    ["perplexica-m2.yourdomain.com"]="perplexica-m2.yourdomain.com"
    ["perplexica-m4.yourdomain.com"]="perplexica-m4.yourdomain.com"
    ["perplexica.yourdomain.com"]="perplexica.yourdomain.com"
    ["webui-m2.yourdomain.com"]="webui-m2.yourdomain.com"
    ["webui-m4-canary.yourdomain.com"]="webui-m4-canary.yourdomain.com"
    ["webui-m4.yourdomain.com"]="webui-m4.yourdomain.com"
    ["webui.yourdomain.com"]="webui.yourdomain.com"
    ["wildcard.yourdomain.com"]="wildcard.yourdomain.com"
)

# Function to process a certificate pair
process_cert_pair() {
    local cert_file="$1"
    local key_file="$2" 
    local title="$3"
    
    if [[ -f "$cert_file" && -f "$key_file" ]]; then
        echo "üìú Processing: $title"
        
        if [[ "$DRY_RUN" == "true" ]]; then
            echo "   [DRY RUN] Would create: SSL: $title"
            return 0
        fi
        
        # Read certificate and key content
        local cert_content
        local key_content
        cert_content=$(cat "$cert_file")
        key_content=$(cat "$key_file")
        
        # Create combined certificate entry in 1Password
        local combined_content="CERTIFICATE:
$cert_content

PRIVATE KEY:
$key_content"
        
        if op item create --category="secure note" \
            --title="SSL: $title" \
            --vault="$VAULT" \
            "notesPlain=$combined_content" &>/dev/null; then
            echo "   ‚úÖ Created: SSL: $title"
        else
            echo "   ‚ùå Failed: SSL: $title"
        fi
    else
        echo "   ‚ö†Ô∏è  Missing files for: $title"
    fi
}

# Process certificates from certs/ directory
echo ""
echo "Processing certificates from certs/ directory..."
for domain in "${!cert_mapping[@]}"; do
    cert_file="./certs/${domain}.crt"
    key_file="./certs/${domain}.key"
    generic_name="${cert_mapping[$domain]}"
    
    if [[ -f "$cert_file" || -f "$key_file" ]]; then
        process_cert_pair "$cert_file" "$key_file" "$generic_name"
    fi
done

# Process certificates from ssl_cert/ directory  
echo ""
echo "Processing certificates from ssl_cert/ directory..."
for domain in "${!cert_mapping[@]}"; do
    cert_file="./ssl_cert/${domain}.crt"
    key_file="./ssl_cert/${domain}.key"
    generic_name="${cert_mapping[$domain]}"
    
    if [[ -f "$cert_file" || -f "$key_file" ]]; then
        process_cert_pair "$cert_file" "$key_file" "$generic_name"
    fi
done

echo ""
echo "üéâ Certificate migration completed!"
echo ""
echo "Next steps:"
echo "1. Update deployment scripts to retrieve certificates from 1Password"
echo "2. Remove certificate files from filesystem (they're in .gitignore)"
echo "3. Test certificate retrieval with: op item get 'SSL: auth-test.yourdomain.com' --vault='$VAULT'"