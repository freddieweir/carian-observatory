#!/bin/bash

# demo-1password-setup.sh
# Demonstration script for 1Password API key integration setup
# This shows the complete workflow for secure API key management

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_demo() {
    echo -e "${PURPLE}[DEMO]${NC} $1"
}

log_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

show_banner() {
    cat << 'EOF'
╔══════════════════════════════════════════════════════════════════╗
║                                                                  ║
║              🔐 1Password API Integration Demo                   ║
║                                                                  ║
║     Secure API Key Management for Open-WebUI & External APIs    ║
║                                                                  ║
╚══════════════════════════════════════════════════════════════════╝
EOF
    echo ""
}

demonstrate_workflow() {
    show_banner
    
    log_demo "This demo shows the complete 1Password integration workflow"
    echo ""
    
    log_step "Step 1: Environment Template Structure"
    echo ""
    log_info "The .env.template file contains 1Password references:"
    echo ""
    cat << 'EOF'
    # API Keys (Securely retrieved from 1Password at runtime)
    OPENAI_API_KEY={{ op://AI Infrastructure Config/OpenAI API Key/credential }}
    ELEVENLABS_API_KEY={{ op://AI Infrastructure Config/ElevenLabs API Key/credential }}
    CLAUDE_API_KEY={{ op://AI Infrastructure Config/Claude API Key/credential }}
    OPENROUTER_API_KEY={{ op://AI Infrastructure Config/OpenRouter API Key/credential }}
    PERPLEXITY_API_KEY={{ op://AI Infrastructure Config/Perplexity API Key/credential }}
EOF
    echo ""
    
    log_step "Step 2: 1Password Vault Item Structure"
    echo ""
    log_info "Create a 1Password item with the following structure:"
    echo ""
    cat << 'EOF'
    Title: AI Infrastructure Config
    Type: Secure Note
    
    Fields (all as 'Password' type):
    ├── OpenAI API Key: sk-proj-...
    ├── ElevenLabs API Key: sk_...
    ├── Claude API Key: sk-ant-...
    ├── OpenRouter API Key: sk-or-...
    └── Perplexity API Key: pplx-...
    
    Optional Fields:
    ├── ElevenLabs Voice ID (Text): rachel
    └── API Usage Notes (Text): Configuration details
EOF
    echo ""
    
    log_step "Step 3: Deployment Commands"
    echo ""
    log_info "Available deployment commands:"
    echo ""
    echo "  # Validate 1Password setup"
    echo "  ./scripts/deploy-api-keys.sh --validate"
    echo ""
    echo "  # Preview deployment (dry run)"
    echo "  ./scripts/deploy-api-keys.sh --dry-run"
    echo ""
    echo "  # Deploy API keys from 1Password"  
    echo "  ./scripts/deploy-api-keys.sh"
    echo ""
    echo "  # Secure startup with API keys"
    echo "  ./scripts/start-with-secrets.sh"
    echo ""
    
    log_step "Step 4: Security Benefits"
    echo ""
    log_success "✅ Zero API keys in git repository"
    log_success "✅ Runtime-only secret access"
    log_success "✅ Centralized credential management"
    log_success "✅ Audit trail through 1Password"
    log_success "✅ Easy API key rotation"
    log_success "✅ Environment separation"
    echo ""
    
    log_step "Step 5: Integration Test"
    echo ""
    log_info "Testing current 1Password CLI setup..."
    
    # Check if 1Password CLI is available
    if command -v op &> /dev/null; then
        log_success "1Password CLI is installed"
        
        # Check authentication status
        if op whoami &> /dev/null; then
            log_success "1Password CLI is authenticated"
            local user=$(op whoami 2>/dev/null || echo "Unknown User")
            log_info "Authenticated as: $user"
            
            # Check for the required vault item
            if op item get "AI Infrastructure Config" --format json &> /dev/null; then
                log_success "Required vault item 'AI Infrastructure Config' found"
                log_info "✅ Ready for secure API key deployment!"
            else
                log_warning "Vault item 'AI Infrastructure Config' not found"
                log_info "Create this item in 1Password with the API keys shown above"
            fi
        else
            log_warning "1Password CLI not authenticated"
            log_info "Run: op signin"
        fi
    else
        log_warning "1Password CLI not installed"
        log_info "Install with: brew install --cask 1password-cli"
    fi
    echo ""
    
    log_step "Step 6: Next Steps"
    echo ""
    log_info "To complete the setup:"
    echo ""
    echo "1. Install 1Password CLI: brew install --cask 1password-cli"
    echo "2. Authenticate: op signin"
    echo "3. Create 'AI Infrastructure Config' item with your API keys"
    echo "4. Run: ./scripts/deploy-api-keys.sh --validate"
    echo "5. Deploy: ./scripts/start-with-secrets.sh"
    echo ""
    
    log_demo "🎉 Demo complete! Your API keys will be securely managed."
    echo ""
    log_info "For detailed documentation, see: docs/1PASSWORD_API_INTEGRATION.md"
}

show_current_config() {
    echo ""
    log_step "Current Configuration Analysis"
    echo ""
    
    if [[ -f ".env.template" ]]; then
        log_info "Environment template found:"
        local api_key_count=$(grep -c "op://" .env.template || echo "0")
        log_info "  • $api_key_count API keys configured with 1Password references"
        
        log_info "  • Configured APIs:"
        grep "op://" .env.template | sed 's/.*{{ op:\/\/.*\/\(.*\)\/credential }}.*/    - \1/' || true
    else
        log_warning "No .env.template file found"
    fi
    
    if [[ -f ".env" ]]; then
        log_info "Current .env file exists"
        if grep -q "op://" .env; then
            log_warning "  • Contains 1Password template references (needs processing)"
        else
            local api_key_count=$(grep -c "API_KEY=" .env | grep -v "^#" || echo "0")
            log_info "  • Contains $api_key_count API key entries"
        fi
    fi
    
    echo ""
}

main() {
    case "${1:-demo}" in
        "demo"|"--demo")
            demonstrate_workflow
            ;;
        "config"|"--config")
            show_current_config
            ;;
        "help"|"--help")
            echo "Usage: $0 [demo|config|help]"
            echo ""
            echo "  demo   - Show complete 1Password integration workflow (default)"
            echo "  config - Analyze current configuration"
            echo "  help   - Show this help message"
            ;;
        *)
            demonstrate_workflow
            ;;
    esac
}

# Only run if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi