#!/bin/bash

# deploy-api-keys.sh
# Securely inject API keys from 1Password into environment configuration
# This script supports both 1Password Connect Server API and CLI fallback
# Priority: Connect Server API -> 1Password CLI -> Manual

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ENV_TEMPLATE="$PROJECT_ROOT/.env.template"
ENV_FILE="$PROJECT_ROOT/.env"
TEMP_ENV="/tmp/.env.$$"

# 1Password Connect Server configuration
CONNECT_API_URL="${CONNECT_API_URL:-http://localhost:8090}"
CONNECT_TOKEN_FILE="${CONNECT_TOKEN_FILE:-}"
CONNECT_TOKEN="${CONNECT_TOKEN:-}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_connect_server() {
    log_info "Checking 1Password Connect Server availability..."
    
    # Check if Connect Server is running and accessible
    if curl -f -s "$CONNECT_API_URL/health" > /dev/null 2>&1; then
        log_success "✅ Connect Server is available at $CONNECT_API_URL"
        return 0
    else
        log_warning "⚠️  Connect Server not available at $CONNECT_API_URL"
        return 1
    fi
}

check_cli_dependencies() {
    log_info "Checking 1Password CLI dependencies..."
    
    # Check if 1Password CLI is installed
    if ! command -v op &> /dev/null; then
        log_error "1Password CLI (op) is not installed or not in PATH"
        log_error "Please install 1Password CLI from official documentation"
        return 1
    fi
    
    # Check if user is authenticated with 1Password
    if ! op whoami &> /dev/null; then
        log_error "Not authenticated with 1Password CLI"
        log_error "Please run: op signin"
        return 1
    fi
    
    log_success "1Password CLI is available and authenticated"
    return 0
}

check_dependencies() {
    log_info "Checking dependencies..."
    
    # Check if template file exists
    if [[ ! -f "$ENV_TEMPLATE" ]]; then
        log_error "Template file not found: $ENV_TEMPLATE"
        exit 1
    fi
    
    # Determine which method to use (priority order)
    local use_connect_server=false
    local use_cli=false
    
    if check_connect_server; then
        # Check for Connect Server authentication
        if [[ -n "$CONNECT_TOKEN" || (-n "$CONNECT_TOKEN_FILE" && -f "$CONNECT_TOKEN_FILE") ]]; then
            use_connect_server=true
            log_info "🔗 Will use 1Password Connect Server API"
        else
            log_warning "Connect Server available but no authentication token configured"
            log_info "Set CONNECT_TOKEN or CONNECT_TOKEN_FILE environment variable"
        fi
    fi
    
    if [[ "$use_connect_server" == false ]] && check_cli_dependencies; then
        use_cli=true
        log_info "🖥️  Will use 1Password CLI"
    fi
    
    if [[ "$use_connect_server" == false && "$use_cli" == false ]]; then
        log_error "No valid 1Password method available"
        log_error "Either set up Connect Server or authenticate with CLI"
        exit 1
    fi
    
    # Export method for use in other functions
    export DEPLOYMENT_METHOD=""
    if [[ "$use_connect_server" == true ]]; then
        export DEPLOYMENT_METHOD="connect"
    elif [[ "$use_cli" == true ]]; then
        export DEPLOYMENT_METHOD="cli"
    fi
    
    log_success "Dependencies satisfied (method: $DEPLOYMENT_METHOD)"
}

validate_1password_vault() {
    log_info "Validating 1Password vault access..."
    
    local vault_item="AI Infrastructure Config"
    
    # Check if the vault item exists
    if ! op item get "$vault_item" --format json &> /dev/null; then
        log_warning "1Password item '$vault_item' not found"
        log_info "Creating the required 1Password item structure..."
        
        # Create the vault item with placeholder values
        cat << 'EOF' > /tmp/1password_template.json
{
  "title": "AI Infrastructure Config",
  "category": "SECURE_NOTE",
  "fields": [
    {"id": "openai_api_key", "type": "CONCEALED", "label": "OpenAI API Key", "value": ""},
    {"id": "elevenlabs_api_key", "type": "CONCEALED", "label": "ElevenLabs API Key", "value": ""},
    {"id": "perplexity_api_key", "type": "CONCEALED", "label": "Perplexity API Key", "value": ""},
    {"id": "claude_api_key", "type": "CONCEALED", "label": "Claude API Key", "value": ""},
    {"id": "openrouter_api_key", "type": "CONCEALED", "label": "OpenRouter API Key", "value": ""}
  ],
  "sections": [
    {
      "id": "api_keys",
      "label": "API Keys for Open-WebUI Integration"
    }
  ]
}
EOF
        
        log_warning "Please manually create the '${vault_item}' item in 1Password with the following fields:"
        log_warning "- OpenAI API Key"
        log_warning "- ElevenLabs API Key"  
        log_warning "- Perplexity API Key"
        log_warning "- Claude API Key"
        log_warning "- OpenRouter API Key"
        log_warning ""
        log_warning "After creating the item, run this script again."
        rm -f /tmp/1password_template.json
        exit 1
    fi
    
    log_success "1Password vault access validated"
}

inject_secrets_via_connect() {
    log_info "Injecting secrets via 1Password Connect Server API..."
    
    # Source the Connect API client
    source "$SCRIPT_DIR/connect-api.sh" 2>/dev/null || {
        log_error "Connect API client not available: $SCRIPT_DIR/connect-api.sh"
        return 1
    }
    
    # Use the Connect API to process template
    export CONNECT_API_URL CONNECT_TOKEN CONNECT_TOKEN_FILE
    if "$SCRIPT_DIR/connect-api.sh" inject-template "$ENV_TEMPLATE" "$TEMP_ENV"; then
        log_success "Successfully processed environment template via Connect Server"
        return 0
    else
        log_error "Failed to inject secrets via Connect Server API"
        return 1
    fi
}

inject_secrets_via_cli() {
    log_info "Injecting secrets via 1Password CLI..."
    
    # Use 1Password CLI inject command to process template
    if op inject -i "$ENV_TEMPLATE" -o "$TEMP_ENV"; then
        log_success "Successfully processed environment template via CLI"
        return 0
    else
        log_error "Failed to inject secrets via 1Password CLI"
        return 1
    fi
}

inject_secrets() {
    log_info "Injecting secrets from 1Password..."
    
    local success=false
    
    # Try the configured deployment method
    case "$DEPLOYMENT_METHOD" in
        "connect")
            if inject_secrets_via_connect; then
                success=true
            else
                log_warning "Connect Server method failed, trying CLI fallback..."
                if check_cli_dependencies && inject_secrets_via_cli; then
                    success=true
                    log_info "Fallback to CLI successful"
                fi
            fi
            ;;
        "cli")
            if inject_secrets_via_cli; then
                success=true
            fi
            ;;
        *)
            log_error "Unknown deployment method: $DEPLOYMENT_METHOD"
            exit 1
            ;;
    esac
    
    if [[ "$success" != true ]]; then
        log_error "All injection methods failed"
        rm -f "$TEMP_ENV"
        exit 1
    fi
    
    # Validate that secrets were actually injected
    if grep -q "{{ op://" "$TEMP_ENV"; then
        log_error "Some 1Password template variables were not resolved:"
        grep "{{ op://" "$TEMP_ENV" || true
        rm -f "$TEMP_ENV"
        exit 1
    fi
    
    # Move the processed file to final location
    mv "$TEMP_ENV" "$ENV_FILE"
    chmod 600 "$ENV_FILE"  # Restrict permissions
    
    log_success "Environment file updated with secure API keys"
    log_info "File location: $ENV_FILE"
}

cleanup() {
    # Clean up temporary files
    rm -f "$TEMP_ENV" /tmp/1password_template.json
}

show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Deploy API keys from 1Password to Open-WebUI environment configuration.
Supports both 1Password Connect Server API and CLI methods with automatic fallback.

OPTIONS:
    -h, --help          Show this help message
    -v, --validate      Only validate 1Password setup without deploying
    -d, --dry-run       Show what would be done without making changes
    -m, --method METHOD Force specific method (connect|cli)

EXAMPLES:
    $0                          Deploy API keys (auto-detect method)
    $0 --validate               Check 1Password configuration
    $0 --dry-run                Preview deployment without changes
    $0 --method connect         Force Connect Server API method
    $0 --method cli             Force CLI method

DEPLOYMENT METHODS (Priority Order):
    1. 1Password Connect Server API (requires running Connect Server + token)
    2. 1Password CLI (requires 'op' command + authentication)

ENVIRONMENT VARIABLES:
    CONNECT_API_URL             Connect Server URL (default: http://localhost:8090)
    CONNECT_TOKEN               Connect Server access token
    CONNECT_TOKEN_FILE          File containing Connect Server access token

REQUIREMENTS:
    Connect Server Method:
        - 1Password Connect Server running (start with: ./scripts/manage-connect-server.sh start)
        - Access token (generate with: ./scripts/manage-connect-server.sh token create)
        - CONNECT_TOKEN or CONNECT_TOKEN_FILE configured
    
    CLI Method (fallback):
        - 1Password CLI (op) installed and authenticated
        - 1Password vaults with required API keys accessible

SETUP:
    1. Start Connect Server: ./scripts/manage-connect-server.sh start
    2. Create access token: ./scripts/manage-connect-server.sh token create
    3. Set token: export CONNECT_TOKEN="your_token_here"
    4. Deploy secrets: $0

EOF
}

main() {
    local validate_only=false
    local dry_run=false
    local force_method=""
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--validate)
                validate_only=true
                shift
                ;;
            -d|--dry-run)
                dry_run=true
                shift
                ;;
            -m|--method)
                force_method="$2"
                shift 2
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Validate force method if specified
    if [[ -n "$force_method" && "$force_method" != "connect" && "$force_method" != "cli" ]]; then
        log_error "Invalid method: $force_method (must be 'connect' or 'cli')"
        exit 1
    fi
    
    # Set up cleanup trap
    trap cleanup EXIT
    
    log_info "🚀 Starting 1Password API key deployment..."
    
    # Override deployment method if forced
    if [[ -n "$force_method" ]]; then
        export DEPLOYMENT_METHOD="$force_method"
        log_info "🔧 Forced deployment method: $force_method"
        
        # Validate forced method dependencies
        case "$force_method" in
            "connect")
                if ! check_connect_server; then
                    log_error "Connect Server not available but method forced"
                    exit 1
                fi
                if [[ -z "$CONNECT_TOKEN" && (-z "$CONNECT_TOKEN_FILE" || ! -f "$CONNECT_TOKEN_FILE") ]]; then
                    log_error "Connect Server method forced but no authentication token available"
                    exit 1
                fi
                ;;
            "cli")
                if ! check_cli_dependencies; then
                    log_error "CLI method forced but dependencies not satisfied"
                    exit 1
                fi
                ;;
        esac
    else
        # Auto-detect best method
        check_dependencies
    fi
    
    # Validate vault access (only for CLI method currently)
    if [[ "$DEPLOYMENT_METHOD" == "cli" ]]; then
        validate_1password_vault
    fi
    
    if [[ "$validate_only" == true ]]; then
        log_success "1Password validation completed successfully"
        exit 0
    fi
    
    if [[ "$dry_run" == true ]]; then
        log_info "DRY RUN: Would inject secrets from 1Password template:"
        log_info "Template: $ENV_TEMPLATE"
        log_info "Output: $ENV_FILE"
        log_info "Run without --dry-run to apply changes"
        exit 0
    fi
    
    # Backup existing .env file
    if [[ -f "$ENV_FILE" ]]; then
        cp "$ENV_FILE" "$ENV_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        log_info "Backed up existing .env file"
    fi
    
    # Inject secrets
    inject_secrets
    
    log_success "🔐 API key deployment completed successfully!"
    log_info "Your Open-WebUI environment is now configured with secure API keys from 1Password"
    log_info "Run './scripts/smart-restart.sh' to apply the new configuration"
}

# Only run main if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi