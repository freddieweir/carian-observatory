#!/bin/bash

# sanitize-repository.sh - Remove personal information and prepare for public commit
# This script replaces personal domains with generic placeholders

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üßπ Sanitizing repository for public commit...${NC}"

# 1. Add .claude to gitignore
echo -e "${YELLOW}üìù Adding .claude to .gitignore...${NC}"
if ! grep -q "^\.claude" .gitignore 2>/dev/null; then
    echo -e "\n# Claude IDE settings (personal)" >> .gitignore
    echo ".claude/" >> .gitignore
    echo -e "${GREEN}‚úÖ Added .claude to .gitignore${NC}"
else
    echo -e "${GREEN}‚úÖ .claude already in .gitignore${NC}"
fi

# 2. Remove .claude from git tracking
if [ -d ".claude" ]; then
    echo -e "${YELLOW}üîì Removing .claude from git tracking...${NC}"
    git rm -r --cached .claude/ 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Removed .claude from tracking${NC}"
fi

# 3. Replace personal domain references with generic placeholders
echo -e "${YELLOW}üîÑ Replacing personal domain references...${NC}"

# Files to sanitize
FILES_TO_SANITIZE=(
    "README.md"
    "CLAUDE.md"
    ".env.example"
    ".env.template"
    "docs/AUTHELIA_2FA_SETUP.md"
    "docs/NGINX_DOMAIN_CONFIGURATION.md"
    "docs/PORTFOLIO_MIGRATION_GUIDE.md"
    "docs/SECURITY_AUDIT_REPORT.md"
    "scripts/migration/*.sh"
    "scripts/infrastructure/*.sh"
    "services/nginx/configs/https.conf.template"
)

# Domain replacements - using simple arrays to avoid bash 4 requirement
REPLACEMENTS=(
    "yourdomain.com:yourdomain.com"
    "auth-m4.yourdomain.com:auth.yourdomain.com"
    "webui-m4.yourdomain.com:webui.yourdomain.com"
    "perplexica-m4.yourdomain.com:perplexica.yourdomain.com"
    "webui-canary.yourdomain.com:webui-canary.yourdomain.com"
    "auth-test.yourdomain.com:auth-test.yourdomain.com"
    "webui-test.yourdomain.com:webui-test.yourdomain.com"
    "admin:username"
    "localhost@example.com:user@example.com"
)

# Perform replacements
for pattern in "${FILES_TO_SANITIZE[@]}"; do
    for file in $(find . -path "./.git" -prune -o -type f -path "$pattern" -print 2>/dev/null); do
        if [ -f "$file" ]; then
            echo -e "  Sanitizing: $file"
            for replacement in "${REPLACEMENTS[@]}"; do
                old="${replacement%%:*}"
                new="${replacement##*:}"
                # Use sed with backup for safety
                sed -i.bak "s/${old}/${new}/g" "$file" 2>/dev/null || true
            done
            # Remove backup files
            rm -f "${file}.bak"
        fi
    done
done

echo -e "${GREEN}‚úÖ Domain references sanitized${NC}"

# 4. Check for remaining personal information
echo -e "${YELLOW}üîç Checking for remaining personal information...${NC}"

REMAINING=$(grep -r "yourdomain\.com\|admin\|personal-info" . \
    --exclude-dir=.git \
    --exclude-dir=node_modules \
    --exclude-dir=.claude \
    --exclude="*.bak" \
    --exclude="sanitize-repository.sh" 2>/dev/null | wc -l)

if [ "$REMAINING" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found $REMAINING remaining references:${NC}"
    grep -r "yourdomain\.com\|admin\|personal-info" . \
        --exclude-dir=.git \
        --exclude-dir=node_modules \
        --exclude-dir=.claude \
        --exclude="*.bak" \
        --exclude="sanitize-repository.sh" 2>/dev/null | head -10
    echo -e "${YELLOW}   Review these manually before committing${NC}"
else
    echo -e "${GREEN}‚úÖ No personal information found${NC}"
fi

# 5. Check for potential secrets
echo -e "${YELLOW}üîê Checking for potential secrets...${NC}"

# Look for actual API key patterns (not just the words)
SECRETS=$(grep -r "sk-[a-zA-Z0-9]\{20,\}\|AKIA[A-Z0-9]\{16\}\|api_key.*=.*['\"][a-zA-Z0-9]\{20,\}" . \
    --exclude-dir=.git \
    --exclude-dir=node_modules \
    --exclude-dir=.claude \
    --exclude="*.bak" 2>/dev/null | wc -l)

if [ "$SECRETS" -gt 0 ]; then
    echo -e "${RED}‚ùå Found potential secrets! Review before committing:${NC}"
    grep -r "sk-[a-zA-Z0-9]\{20,\}\|AKIA[A-Z0-9]\{16\}\|api_key.*=.*['\"][a-zA-Z0-9]\{20,\}" . \
        --exclude-dir=.git \
        --exclude-dir=node_modules \
        --exclude-dir=.claude \
        --exclude="*.bak" 2>/dev/null | head -5
else
    echo -e "${GREEN}‚úÖ No hardcoded secrets found${NC}"
fi

# 6. Update .env.example with generic values
echo -e "${YELLOW}üìù Updating .env.example with generic values...${NC}"
if [ -f ".env.example" ]; then
    sed -i.bak 's/PRIMARY_DOMAIN=.*/PRIMARY_DOMAIN=yourdomain.com/' .env.example
    sed -i.bak 's/AUTH_DOMAIN=.*/AUTH_DOMAIN=auth.yourdomain.com/' .env.example
    sed -i.bak 's/WEBUI_DOMAIN=.*/WEBUI_DOMAIN=webui.yourdomain.com/' .env.example
    sed -i.bak 's/PERPLEXICA_DOMAIN=.*/PERPLEXICA_DOMAIN=perplexica.yourdomain.com/' .env.example
    sed -i.bak 's/CANARY_DOMAIN=.*/CANARY_DOMAIN=webui-canary.yourdomain.com/' .env.example
    rm -f .env.example.bak
    echo -e "${GREEN}‚úÖ Updated .env.example${NC}"
fi

# 7. Final summary
echo -e "\n${BLUE}üìä Sanitization Summary:${NC}"
echo -e "  ‚úÖ .claude added to .gitignore"
echo -e "  ‚úÖ Personal domains replaced with generic placeholders"
echo -e "  ‚úÖ Checked for hardcoded secrets"
echo -e "  ‚úÖ Updated .env.example"

echo -e "\n${GREEN}üéâ Repository sanitized and ready for commit!${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Remember to:${NC}"
echo -e "  1. Review any remaining warnings above"
echo -e "  2. Check git status before committing"
echo -e "  3. Never commit .env files (only .env.example)"
echo -e "  4. Keep all secrets in 1Password"

# Show git status
echo -e "\n${BLUE}üìù Current git status:${NC}"
git status --short