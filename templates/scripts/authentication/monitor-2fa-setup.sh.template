#!/bin/bash

# ============================================================================
# Authelia 2FA Setup Monitor
# ============================================================================
# This script monitors Authelia's notification file and helps set up TOTP/2FA
# It displays QR codes and setup links when new 2FA registration is initiated

set -e

# Colors for better visibility
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Configuration
NOTIFICATION_FILE="configs/authelia/notification.txt"
PROCESSED_FILE="configs/authelia/.notification_processed"
CHECK_INTERVAL=2

# Create processed file if it doesn't exist
touch "$PROCESSED_FILE" 2>/dev/null || true

echo -e "${BLUE}${BOLD}=== Authelia 2FA Setup Monitor ===${NC}"
echo -e "${GREEN}Monitoring for 2FA setup requests...${NC}"
echo -e "${YELLOW}To set up 2FA:${NC}"
echo "1. Go to https://auth.yourdomain.com"
echo "2. Login with your username/password"
echo "3. Click on your username → Settings"
echo "4. Register a new TOTP device or Passkey"
echo ""
echo -e "${BLUE}Press Ctrl+C to exit${NC}"
echo "-----------------------------------"

# Function to generate QR code in terminal
generate_qr() {
    local url="$1"
    if command -v qrencode >/dev/null 2>&1; then
        echo -e "\n${GREEN}${BOLD}QR Code for mobile scanning:${NC}"
        qrencode -t UTF8 "$url"
    else
        echo -e "\n${YELLOW}Install qrencode for QR codes: brew install qrencode${NC}"
    fi
}

# Function to process TOTP setup
process_totp() {
    local content="$1"

    # Extract TOTP URL if present
    if echo "$content" | grep -q "otpauth://totp/"; then
        local totp_url=$(echo "$content" | grep -o "otpauth://totp/[^[:space:]]*" | head -1)

        echo -e "\n${GREEN}${BOLD}🔐 NEW TOTP SETUP DETECTED!${NC}"
        echo "-----------------------------------"
        echo -e "${BLUE}Setup URL:${NC}"
        echo "$totp_url"

        # Generate QR code
        generate_qr "$totp_url"

        echo -e "\n${YELLOW}${BOLD}Setup Instructions:${NC}"
        echo "1. Open your authenticator app (Google Authenticator, 1Password, etc.)"
        echo "2. Scan the QR code above OR manually enter this URL:"
        echo "   $totp_url"
        echo "3. Enter the 6-digit code from your app in Authelia to complete setup"

        # Copy to clipboard if on macOS
        if command -v pbcopy >/dev/null 2>&1; then
            echo "$totp_url" | pbcopy
            echo -e "\n${GREEN}✓ TOTP URL copied to clipboard!${NC}"
        fi

        # Save to file for backup
        echo "$totp_url" > configs/authelia/last_totp_setup.txt
        echo -e "${BLUE}Backup saved to: configs/authelia/last_totp_setup.txt${NC}"
    fi
}

# Function to process password reset
process_password_reset() {
    local content="$1"

    if echo "$content" | grep -q "reset your password"; then
        local reset_url=$(echo "$content" | grep -o "https://[^[:space:]]*" | head -1)

        echo -e "\n${YELLOW}${BOLD}🔑 PASSWORD RESET LINK DETECTED!${NC}"
        echo "-----------------------------------"
        echo -e "${BLUE}Reset URL:${NC}"
        echo "$reset_url"

        if command -v pbcopy >/dev/null 2>&1; then
            echo "$reset_url" | pbcopy
            echo -e "\n${GREEN}✓ Reset URL copied to clipboard!${NC}"
        fi
    fi
}

# Main monitoring loop
while true; do
    if [ -f "$NOTIFICATION_FILE" ]; then
        # Get file size
        current_size=$(stat -f%z "$NOTIFICATION_FILE" 2>/dev/null || stat -c%s "$NOTIFICATION_FILE" 2>/dev/null || echo "0")

        # Read last processed size
        last_size=$(cat "$PROCESSED_FILE" 2>/dev/null || echo "0")

        # Check if file has new content
        if [ "$current_size" -gt "$last_size" ]; then
            # Read new content
            new_content=$(tail -c +$((last_size + 1)) "$NOTIFICATION_FILE")

            if [ -n "$new_content" ]; then
                echo -e "\n${YELLOW}New notification detected!${NC}"

                # Process different types of notifications
                process_totp "$new_content"
                process_password_reset "$new_content"

                # Update processed size
                echo "$current_size" > "$PROCESSED_FILE"

                echo -e "\n${GREEN}Continuing to monitor...${NC}"
                echo "-----------------------------------"
            fi
        fi
    fi

    sleep $CHECK_INTERVAL
done