#!/bin/bash

# ============================================================================
# Authelia 2FA Management Tool
# ============================================================================
# Interactive script for managing TOTP, Passkeys, and authentication settings

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'
BOLD='\033[1m'

# Configuration paths
CONFIG_FILE="configs/authelia/configuration.yml"
NOTIFICATION_FILE="configs/authelia/notification.txt"
CONTAINER_NAME="authelia"

# Function to display menu
show_menu() {
    echo -e "\n${BLUE}${BOLD}=== Authelia 2FA Management ===${NC}"
    echo "1) Enable one-factor authentication (password only)"
    echo "2) Enable two-factor authentication (password + TOTP/Passkey)"
    echo "3) Monitor 2FA setup requests"
    echo "4) View current authentication policy"
    echo "5) Clear notification file"
    echo "6) Test TOTP setup (generate sample QR)"
    echo "7) Show last TOTP setup URL"
    echo "8) Generate password hash for new user"
    echo "9) Exit"
    echo -n "Select option: "
}

# Function to update auth policy
update_auth_policy() {
    local policy="$1"
    echo -e "${YELLOW}Updating authentication policy to: ${policy}${NC}"

    # Update the configuration file
    if [ "$policy" = "one_factor" ]; then
        sed -i '' "s/policy: 'two_factor'/policy: 'one_factor'/g" "$CONFIG_FILE"
        echo -e "${GREEN}✓ Changed to one-factor authentication${NC}"
    else
        sed -i '' "s/policy: 'one_factor'/policy: 'two_factor'/g" "$CONFIG_FILE"
        echo -e "${GREEN}✓ Changed to two-factor authentication${NC}"
    fi

    # Restart Authelia
    echo "Restarting Authelia..."
    docker restart "$CONTAINER_NAME" >/dev/null 2>&1
    sleep 3
    echo -e "${GREEN}✓ Authelia restarted${NC}"
}

# Function to show current policy
show_current_policy() {
    echo -e "\n${BLUE}Current Authentication Policy:${NC}"
    grep -A5 "access_control:" "$CONFIG_FILE" | grep "policy:" | head -3
}

# Function to generate test TOTP
generate_test_totp() {
    local secret="JBSWY3DPEHPK3PXP"  # Example secret
    local user="testuser"
    local issuer="AI%20Infrastructure"
    local url="otpauth://totp/${issuer}:${user}?secret=${secret}&issuer=${issuer}&algorithm=SHA1&digits=6&period=30"

    echo -e "\n${YELLOW}Sample TOTP URL for testing:${NC}"
    echo "$url"

    if command -v qrencode >/dev/null 2>&1; then
        echo -e "\n${GREEN}QR Code:${NC}"
        qrencode -t UTF8 "$url"
    else
        echo -e "\n${YELLOW}Install qrencode to see QR codes: brew install qrencode${NC}"
    fi

    echo -e "\n${BLUE}Manual setup:${NC}"
    echo "Secret: $secret"
    echo "Issuer: AI Infrastructure"
    echo "Algorithm: SHA1, 6 digits, 30 seconds"
}

# Function to generate password hash
generate_password_hash() {
    echo -n "Enter password to hash: "
    read -s password
    echo
    echo -n "Confirm password: "
    read -s password_confirm
    echo

    if [ "$password" != "$password_confirm" ]; then
        echo -e "${RED}Passwords do not match!${NC}"
        return 1
    fi

    # Use Docker to generate the hash
    echo -e "\n${YELLOW}Generating Argon2id hash...${NC}"

    # Create temporary config for hash generation
    hash=$(docker run --rm authelia/authelia:latest authelia crypto hash generate argon2 --password "$password" 2>/dev/null | grep "Digest:" | cut -d' ' -f2)

    if [ -n "$hash" ]; then
        echo -e "${GREEN}Password hash:${NC}"
        echo "$hash"
        echo
        echo -e "${BLUE}Add this to users_database.yml under the user's password field${NC}"

        # Copy to clipboard if on macOS
        if command -v pbcopy >/dev/null 2>&1; then
            echo "$hash" | pbcopy
            echo -e "${GREEN}✓ Hash copied to clipboard!${NC}"
        fi
    else
        echo -e "${RED}Failed to generate hash. Using fallback method...${NC}"
        # Fallback: use Python if available
        if command -v python3 >/dev/null 2>&1; then
            python3 -c "
import hashlib
import os
import base64
password = '$password'
salt = os.urandom(16)
# This is a simple example - Authelia uses Argon2id
hash_obj = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
print(f'Note: This is a PBKDF2 hash, not Argon2id. For production, use Docker method.')
print(f'Hash: {base64.b64encode(salt + hash_obj).decode()}')
"
        fi
    fi
}

# Main loop
while true; do
    show_menu
    read -r choice

    case $choice in
        1)
            update_auth_policy "one_factor"
            echo -e "${YELLOW}Note: Users can now login with password only${NC}"
            ;;
        2)
            update_auth_policy "two_factor"
            echo -e "${YELLOW}Note: Users will need to set up TOTP or Passkey${NC}"
            echo "Run option 3 to monitor setup requests"
            ;;
        3)
            echo -e "${GREEN}Starting 2FA setup monitor...${NC}"
            ./scripts/monitor-2fa-setup.sh
            ;;
        4)
            show_current_policy
            ;;
        5)
            > "$NOTIFICATION_FILE"
            echo -e "${GREEN}✓ Notification file cleared${NC}"
            ;;
        6)
            generate_test_totp
            ;;
        7)
            if [ -f "configs/authelia/last_totp_setup.txt" ]; then
                echo -e "\n${BLUE}Last TOTP Setup URL:${NC}"
                cat "configs/authelia/last_totp_setup.txt"

                if command -v qrencode >/dev/null 2>&1; then
                    echo -e "\n${GREEN}QR Code:${NC}"
                    qrencode -t UTF8 "$(cat configs/authelia/last_totp_setup.txt)"
                fi
            else
                echo -e "${YELLOW}No previous TOTP setup found${NC}"
            fi
            ;;
        8)
            generate_password_hash
            ;;
        9)
            echo -e "${GREEN}Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid option${NC}"
            ;;
    esac
done