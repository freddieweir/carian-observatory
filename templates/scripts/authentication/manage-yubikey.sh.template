#!/bin/bash

# YubiKey and Passkey Management Script
# Helps with registering and managing hardware authentication devices

set -e

echo "ðŸ”‘ YubiKey and Passkey Management for AI Infrastructure..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "YubiKey and Passkey Management Script"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  status     - Check YubiKey detection and authentication status"
    echo "  test       - Test YubiKey FIDO2 functionality"
    echo "  register   - Guide for registering new devices"
    echo "  backup     - Generate backup recovery codes"
    echo "  list       - List registered devices (requires admin access)"
    echo "  help       - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 status              # Check if YubiKey is detected"
    echo "  $0 register            # Get registration instructions"
    echo "  $0 test                # Test FIDO2 functionality"
}

# Function to check YubiKey detection
check_yubikey_status() {
    print_status "Checking for YubiKey devices..."
    
    # Check if ykman is available
    if command -v ykman &> /dev/null; then
        print_success "YubiKey Manager (ykman) is available"
        
        # List connected YubiKeys
        if ykman list 2>/dev/null | grep -q "YubiKey"; then
            print_success "YubiKey detected:"
            ykman list
            
            # Get device info
            print_status "Device information:"
            ykman info 2>/dev/null || print_warning "Could not get device info"
        else
            print_warning "No YubiKey detected. Please ensure it's connected."
        fi
    else
        print_warning "YubiKey Manager not installed. Install with:"
        echo "  macOS: brew install ykman"
        echo "  Linux: sudo apt install yubikey-manager"
    fi
    
    # Check for 1Password CLI
    print_status "Checking 1Password CLI..."
    if command -v op &> /dev/null; then
        print_success "1Password CLI is available"
        if op account list &>/dev/null; then
            print_success "1Password CLI is signed in"
        else
            print_warning "1Password CLI is not signed in. Run: op signin"
        fi
    else
        print_warning "1Password CLI not installed. Install with:"
        echo "  macOS: brew install 1password-cli"
    fi
    
    # Check browser passkey support
    print_status "Browser passkey support:"
    echo "âœ… Chrome/Chromium: Full WebAuthn support"
    echo "âœ… Firefox: Full WebAuthn support"
    echo "âœ… Safari: Full WebAuthn support"
    echo "âœ… Edge: Full WebAuthn support"
}

# Function to test FIDO2 functionality
test_fido2() {
    print_status "Testing FIDO2 functionality..."
    
    if command -v ykman &> /dev/null; then
        print_status "Checking FIDO2 application status..."
        if ykman fido info 2>/dev/null; then
            print_success "FIDO2 application is working"
        else
            print_error "FIDO2 application test failed"
            return 1
        fi
    else
        print_warning "Cannot test FIDO2 without ykman installed"
    fi
    
    print_status "To test full authentication flow:"
    echo "1. Visit: https://webauthn.io"
    echo "2. Create an account and register your YubiKey"
    echo "3. Test authentication with touch"
    echo ""
    print_status "For your AI infrastructure:"
    echo "1. Visit: https://auth.yourdomain.com"
    echo "2. Login with username/password"
    echo "3. Go to Settings â†’ Register Device"
    echo "4. Follow the prompts to register your YubiKey"
}

# Function to provide registration guidance
show_registration_guide() {
    print_status "YubiKey/Passkey Registration Guide"
    echo ""
    echo "ðŸ”¹ Step 1: Ensure Authentication Service is Running"
    echo "   docker-compose --env-file .env.canary -f configs/docker-compose.canary.yaml up -d"
    echo ""
    echo "ðŸ”¹ Step 2: Access the Authentication Portal"
    echo "   Open: https://auth.yourdomain.com"
    echo "   (Add to /etc/hosts if needed: [YOUR_IP] auth.yourdomain.com)"
    echo ""
    echo "ðŸ”¹ Step 3: Initial Login"
    echo "   Use the admin credentials you set during setup"
    echo ""
    echo "ðŸ”¹ Step 4: Register Hardware Device"
    echo "   1. Click 'Settings' or 'Security' in the portal"
    echo "   2. Look for 'Register Security Key' or 'Add Device'"
    echo "   3. Choose 'Security Key' or 'Hardware Token'"
    echo "   4. Insert YubiKey when prompted"
    echo "   5. Touch the YubiKey when it blinks"
    echo "   6. Give the device a memorable name"
    echo ""
    echo "ðŸ”¹ Step 5: Test Authentication"
    echo "   1. Log out from the auth portal"
    echo "   2. Visit: https://webui.yourdomain.com"
    echo "   3. You should be redirected to auth portal"
    echo "   4. Login with YubiKey instead of password"
    echo ""
    echo "ðŸ”¹ Supported Devices:"
    echo "   âœ… YubiKey 5 Series (USB-A, USB-C, NFC, Nano)"
    echo "   âœ… YubiKey Security Key Series"
    echo "   âœ… Touch ID (macOS Safari)"
    echo "   âœ… Windows Hello"
    echo "   âœ… 1Password Passkeys"
    echo "   âœ… Other FIDO2/WebAuthn compatible devices"
    echo ""
    print_warning "Backup Options:"
    echo "   - Register multiple YubiKeys"
    echo "   - Enable TOTP (Google Authenticator, 1Password)"
    echo "   - Generate recovery codes"
}

# Function to generate backup codes
generate_backup_codes() {
    print_status "Backup Authentication Methods"
    echo ""
    echo "ðŸ”¹ TOTP (Time-based One-Time Password)"
    echo "   1. In auth portal, go to Settings"
    echo "   2. Enable 'TOTP' or 'Authenticator App'"
    echo "   3. Scan QR code with:"
    echo "      - 1Password"
    echo "      - Google Authenticator"
    echo "      - Authy"
    echo "      - Microsoft Authenticator"
    echo ""
    echo "ðŸ”¹ Recovery Codes"
    echo "   1. In auth portal settings"
    echo "   2. Generate one-time recovery codes"
    echo "   3. Store securely in 1Password"
    echo "   4. Each code can only be used once"
    echo ""
    echo "ðŸ”¹ Multiple Hardware Keys"
    echo "   - Register both nano and full-size YubiKeys"
    echo "   - Keep one as backup in secure location"
    echo ""
    print_warning "Store backup methods securely!"
    echo "   - 1Password vault (recommended)"
    echo "   - Physical secure location"
    echo "   - Never store with primary device"
}

# Function to list registered devices (requires API access)
list_devices() {
    print_status "Listing registered devices..."
    print_warning "This requires administrative access to Authelia"
    echo ""
    echo "To view registered devices:"
    echo "1. Access Authelia admin interface"
    echo "2. Check container logs for device registrations:"
    echo "   docker logs authelia-canary | grep -i webauthn"
    echo ""
    echo "3. Or check the database directly:"
    echo "   docker exec authelia-canary sqlite3 /config/db.sqlite3 \\"
    echo "   \"SELECT * FROM webauthn_devices;\""
}

# Main script logic
case "${1:-help}" in
    status)
        check_yubikey_status
        ;;
    test)
        test_fido2
        ;;
    register)
        show_registration_guide
        ;;
    backup)
        generate_backup_codes
        ;;
    list)
        list_devices
        ;;
    help|*)
        show_usage
        ;;
esac

echo ""
print_success "YubiKey management complete!"