# Production Nginx Configuration Template
# Variables will be substituted from environment at runtime

# Open-WebUI Canary HTTPS
server {
    listen 443 ssl;
    http2 on;
    server_name ${CANARY_DOMAIN};
    
    ssl_certificate /etc/ssl/custom/${CANARY_DOMAIN}.crt;
    ssl_certificate_key /etc/ssl/custom/${CANARY_DOMAIN}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    location /authelia {
        internal;
        proxy_pass http://host.docker.internal:9091/api/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
    }
    
    location / {
        auth_request /authelia;
        auth_request_set $user $upstream_http_remote_user;
        error_page 401 =302 https://${AUTH_DOMAIN}/?rd=$scheme://$http_host$request_uri;
        
        proxy_pass http://open-webui-canary:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Remote-User $user;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# Open-WebUI HTTPS (Production) - DEFAULT SERVER
server {
    listen 443 ssl default_server;
    http2 on;
    server_name ${GENERIC_WEBUI_DOMAIN} ${WEBUI_DOMAIN};
    
    ssl_certificate /etc/ssl/custom/${WEBUI_DOMAIN}.crt;
    ssl_certificate_key /etc/ssl/custom/${WEBUI_DOMAIN}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    location /authelia {
        internal;
        proxy_pass http://host.docker.internal:9091/api/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
    }
    
    location / {
        auth_request /authelia;
        auth_request_set $user $upstream_http_remote_user;
        error_page 401 =302 https://${AUTH_DOMAIN}/?rd=$scheme://$http_host$request_uri;
        
        proxy_pass http://open-webui:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Remote-User $user;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# Perplexica HTTPS with Authentication
server {
    listen 443 ssl;
    http2 on;
    server_name ${GENERIC_PERPLEXICA_DOMAIN} ${PERPLEXICA_DOMAIN};
    
    ssl_certificate /etc/ssl/custom/${PERPLEXICA_DOMAIN}.crt;
    ssl_certificate_key /etc/ssl/custom/${PERPLEXICA_DOMAIN}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    location /authelia {
        internal;
        proxy_pass http://host.docker.internal:9091/api/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
    }
    
    location / {
        auth_request /authelia;
        auth_request_set $user $upstream_http_remote_user;
        error_page 401 =302 https://${AUTH_DOMAIN}/?rd=$scheme://$http_host$request_uri;
        
        proxy_set_header Remote-User $user;
        proxy_pass http://perplexica:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Iframe-friendly route for Perplexica
    location /iframe {
        auth_request /authelia;
        auth_request_set $user $upstream_http_remote_user;
        error_page 401 =302 https://${AUTH_DOMAIN}/?rd=$scheme://$http_host$request_uri;

        # Remove restrictive frame options and CSP for iframe embedding
        proxy_hide_header X-Frame-Options;
        proxy_hide_header Content-Security-Policy;
        add_header X-Frame-Options "ALLOWFROM https://${GLANCE_DOMAIN}" always;
        add_header Content-Security-Policy "frame-ancestors 'self' https://${GLANCE_DOMAIN} https://*.corporateseas.com;" always;

        proxy_set_header Remote-User $user;
        proxy_pass http://perplexica:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;

        # Important: Add headers to help with iframe compatibility
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;

        # Enable sub_filter to inject localStorage workaround
        sub_filter_once off;
        sub_filter_types text/html application/javascript;

        # Inject script to handle localStorage access errors in iframe context
        sub_filter '</head>' '<script>
(function() {
    // localStorage workaround for iframe context
    if (!window.localStorage) {
        window.localStorage = {
            _data: {},
            setItem: function(id, val) { this._data[id] = String(val); },
            getItem: function(id) { return this._data.hasOwnProperty(id) ? this._data[id] : null; },
            removeItem: function(id) { delete this._data[id]; },
            clear: function() { this._data = {}; },
            get length() { return Object.keys(this._data).length; },
            key: function(index) { return Object.keys(this._data)[index] || null; }
        };
    }

    // Wrap original localStorage to catch SecurityErrors
    const originalLocalStorage = window.localStorage;
    const safeLocalStorage = {
        setItem: function(key, value) {
            try {
                return originalLocalStorage.setItem(key, value);
            } catch(e) {
                console.warn("localStorage.setItem blocked in iframe:", e);
            }
        },
        getItem: function(key) {
            try {
                return originalLocalStorage.getItem(key);
            } catch(e) {
                console.warn("localStorage.getItem blocked in iframe:", e);
                return null;
            }
        },
        removeItem: function(key) {
            try {
                return originalLocalStorage.removeItem(key);
            } catch(e) {
                console.warn("localStorage.removeItem blocked in iframe:", e);
            }
        },
        clear: function() {
            try {
                return originalLocalStorage.clear();
            } catch(e) {
                console.warn("localStorage.clear blocked in iframe:", e);
            }
        }
    };

    // Override localStorage with safe wrapper
    try {
        Object.defineProperty(window, "localStorage", {
            value: safeLocalStorage,
            writable: false,
            configurable: false
        });
    } catch(e) {
        console.warn("Could not override localStorage:", e);
    }
})();
</script></head>';
    }
}

# Homepage HTTPS with Authentication
server {
    listen 443 ssl;
    http2 on;
    server_name ${GENERIC_HOMEPAGE_DOMAIN} ${HOMEPAGE_DOMAIN};
    
    ssl_certificate /etc/ssl/custom/${HOMEPAGE_DOMAIN}.crt;
    ssl_certificate_key /etc/ssl/custom/${HOMEPAGE_DOMAIN}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    location /authelia {
        internal;
        proxy_pass http://host.docker.internal:9091/api/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
    }
    
    location / {
        auth_request /authelia;
        auth_request_set $user $upstream_http_remote_user;
        error_page 401 =302 https://${AUTH_DOMAIN}/?rd=$scheme://$http_host$request_uri;
        
        proxy_pass http://homepage:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Remote-User $user;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# Authelia Portal
server {
    listen 443 ssl;
    http2 on;
    server_name ${GENERIC_AUTH_DOMAIN} ${AUTH_DOMAIN};
    
    ssl_certificate /etc/ssl/custom/${AUTH_DOMAIN}.crt;
    ssl_certificate_key /etc/ssl/custom/${AUTH_DOMAIN}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    location / {
        proxy_pass http://host.docker.internal:9091;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# Glance Dashboard HTTPS
server {
    listen 443 ssl;
    http2 on;
    server_name ${GENERIC_GLANCE_DOMAIN} ${GLANCE_DOMAIN};

    ssl_certificate /etc/ssl/custom/${GLANCE_DOMAIN}.crt;
    ssl_certificate_key /etc/ssl/custom/${GLANCE_DOMAIN}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options SAMEORIGIN always;  # Allow iframe for Homepage embedding
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    location /authelia {
        internal;
        proxy_pass http://host.docker.internal:9091/api/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
    }

    location / {
        auth_request /authelia;
        auth_request_set $user $upstream_http_remote_user;
        error_page 401 =302 https://${AUTH_DOMAIN}/?rd=$scheme://$http_host$request_uri;

        proxy_pass http://co-glance-service:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Remote-User $user;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name ${GENERIC_WEBUI_DOMAIN} ${GENERIC_PERPLEXICA_DOMAIN} ${GENERIC_AUTH_DOMAIN} ${GENERIC_HOMEPAGE_DOMAIN} ${GENERIC_GLANCE_DOMAIN};
    return 301 https://$server_name$request_uri;
}

# Fallback server for IP access
server {
    listen 80 default_server;
    server_name _;
    
    location / {
        proxy_pass http://open-webui:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
    
    location /perplexica/ {
        proxy_pass http://perplexica:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
    }
    
    location /health {
        return 200 "OK";
        add_header Content-Type text/plain;
    }
}