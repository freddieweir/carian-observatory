#!/bin/bash
# Memory management utilities for Carian Observatory
# Template version - uses generic domains

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DB_CONTAINER="co-postgresql-service"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo -e "${BLUE}Carian Observatory Memory Manager${NC}"
    echo ""
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  status          Show memory database status"
    echo "  import          Import JSON files to memories"
    echo "  search          Search memories"
    echo "  backup          Backup memory database"
    echo "  restore         Restore from backup"
    echo "  reset           Reset memory database (DANGEROUS)"
    echo ""
    echo "Examples:"
    echo "  $0 status"
    echo "  $0 import /path/to/json/files"
    echo "  $0 search 'AI development'"
    echo "  $0 backup /path/to/backup.sql"
}

check_database() {
    if ! docker exec $DB_CONTAINER pg_isready -U "${POSTGRESQL_USER}" -d "${POSTGRESQL_DB}" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå PostgreSQL database is not ready${NC}"
        exit 1
    fi
}

show_status() {
    echo -e "${BLUE}üìä Memory Database Status${NC}"
    echo ""

    check_database

    docker exec $DB_CONTAINER psql -U "${POSTGRESQL_USER}" -d "${POSTGRESQL_DB}" -c "
        SELECT
            'üìö Total Memories: ' || total_memories,
            'üë• Unique Users: ' || unique_users,
            'üí¨ Unique Chats: ' || unique_chats,
            'üìè Avg Content Length: ' || ROUND(avg_content_length, 0) || ' chars',
            'üìÖ Date Range: ' || earliest_memory::date || ' to ' || latest_memory::date
        FROM memory_stats;
    "
}

import_memories() {
    local input_dir="$1"

    if [[ -z "$input_dir" ]]; then
        echo -e "${RED}‚ùå Input directory required${NC}"
        echo "Usage: $0 import /path/to/json/files"
        exit 1
    fi

    if [[ ! -d "$input_dir" ]]; then
        echo -e "${RED}‚ùå Directory not found: $input_dir${NC}"
        exit 1
    fi

    echo -e "${BLUE}üöÄ Importing memories from $input_dir${NC}"

    # Copy script into container and run
    docker cp "$SCRIPT_DIR/import-memories.py" $DB_CONTAINER:/tmp/
    docker cp "$input_dir" $DB_CONTAINER:/tmp/json_input

    docker exec -e DATABASE_URL="postgresql://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@localhost:5432/${POSTGRESQL_DB}" \
        $DB_CONTAINER python3 /tmp/import-memories.py --input-dir /tmp/json_input

    echo -e "${GREEN}‚úÖ Import completed${NC}"
}

search_memories() {
    local query="$1"

    if [[ -z "$query" ]]; then
        echo -e "${RED}‚ùå Search query required${NC}"
        echo "Usage: $0 search 'your search terms'"
        exit 1
    fi

    echo -e "${BLUE}üîç Searching for: '$query'${NC}"
    echo ""

    check_database

    docker exec $DB_CONTAINER psql -U "${POSTGRESQL_USER}" -d "${POSTGRESQL_DB}" -c "
        SELECT
            LEFT(content, 100) || '...' as content_preview,
            chat_id,
            timestamp::date as date,
            ROUND(combined_score::numeric, 3) as relevance
        FROM search_memories('$query', NULL, NULL, 10, 0.1)
        ORDER BY combined_score DESC;
    "
}

backup_database() {
    local backup_file="$1"

    if [[ -z "$backup_file" ]]; then
        backup_file="memory_backup_$(date +%Y%m%d_%H%M%S).sql"
    fi

    echo -e "${BLUE}üíæ Creating backup: $backup_file${NC}"

    check_database

    docker exec $DB_CONTAINER pg_dump -U "${POSTGRESQL_USER}" "${POSTGRESQL_DB}" > "$backup_file"

    echo -e "${GREEN}‚úÖ Backup created: $backup_file${NC}"
}

restore_database() {
    local backup_file="$1"

    if [[ -z "$backup_file" ]]; then
        echo -e "${RED}‚ùå Backup file required${NC}"
        echo "Usage: $0 restore /path/to/backup.sql"
        exit 1
    fi

    if [[ ! -f "$backup_file" ]]; then
        echo -e "${RED}‚ùå Backup file not found: $backup_file${NC}"
        exit 1
    fi

    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: This will replace current database contents!${NC}"
    read -p "Type 'RESTORE' to confirm: " confirm

    if [[ "$confirm" != "RESTORE" ]]; then
        echo -e "${YELLOW}Operation cancelled${NC}"
        exit 0
    fi

    echo -e "${BLUE}üì• Restoring database from $backup_file${NC}"

    check_database

    docker exec -i $DB_CONTAINER psql -U "${POSTGRESQL_USER}" -d "${POSTGRESQL_DB}" < "$backup_file"

    echo -e "${GREEN}‚úÖ Database restored${NC}"
}

reset_database() {
    echo -e "${RED}‚ö†Ô∏è  WARNING: This will delete ALL memory data!${NC}"
    read -p "Type 'RESET' to confirm: " confirm

    if [[ "$confirm" != "RESET" ]]; then
        echo -e "${YELLOW}Operation cancelled${NC}"
        exit 0
    fi

    echo -e "${BLUE}üóëÔ∏è  Resetting memory database${NC}"

    check_database

    docker exec $DB_CONTAINER psql -U "${POSTGRESQL_USER}" -d "${POSTGRESQL_DB}" -c "
        TRUNCATE TABLE memories RESTART IDENTITY CASCADE;
    "

    echo -e "${GREEN}‚úÖ Database reset completed${NC}"
}

# Main command processing
case "${1:-}" in
    status)
        show_status
        ;;
    import)
        import_memories "$2"
        ;;
    search)
        search_memories "$2"
        ;;
    backup)
        backup_database "$2"
        ;;
    restore)
        restore_database "$2"
        ;;
    reset)
        reset_database
        ;;
    *)
        usage
        exit 1
        ;;
esac